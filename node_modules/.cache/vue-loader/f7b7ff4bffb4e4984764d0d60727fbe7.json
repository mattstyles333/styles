{"remainingRequest":"/home/envisible/Documents/code/styles/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/envisible/Documents/code/styles/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/envisible/Documents/code/styles/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/envisible/Documents/code/styles/src/pages/homepage/HomePage.vue?vue&type=template&id=c95cc04a&","dependencies":[{"path":"/home/envisible/Documents/code/styles/src/pages/homepage/HomePage.vue","mtime":1638142126206},{"path":"/home/envisible/Documents/code/styles/node_modules/cache-loader/dist/cjs.js","mtime":1638143730422},{"path":"/home/envisible/Documents/code/styles/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638143736180},{"path":"/home/envisible/Documents/code/styles/node_modules/cache-loader/dist/cjs.js","mtime":1638143730422},{"path":"/home/envisible/Documents/code/styles/node_modules/vue-loader/lib/index.js","mtime":1638143736180}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}